{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["../src/analyzer.ts"],"names":[],"mappings":";;;AAYA,mCAAwC;AACxC,uCAAiD;AAEjD;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,QAAa;IAC5C,OAAO,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,gBAAgB,CAAC,CAAC;AACxD,CAAC;AAFD,4CAEC;AAuND;;GAEG;AACH,MAAa,QAAQ;IAInB;;;OAGG;IACH,YAAY,EAAY,EAAE,IAAY;QACpC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;;;;;;;;OAUG;IACH,KAAK,CAAC,MAAM;QACV,IAAI;YACF,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,qBAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,0BAAkB,EAAE;gBAC7D,OAAO,KAAK,CAAC;aACd;YACD,MAAM,GAAG,CAAC;SACX;IACH,CAAC;IAED;;;;;;;;;;OAUG;IACH,GAAG;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CACrB,EAAE,IAAI,EAAE,kBAAkB,IAAI,CAAC,IAAI,EAAE,EAAE,EACvC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAClB,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,MAAM,CAAC,OAA8B;QACnC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CACrB;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,gBAAgB;YACtB,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,OAAO,EAAE;SACtC,EACD,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAClB,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,IAAI,CACF,QAAiB,KAAK;QAEtB,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CACrB;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,kBAAkB,IAAI,CAAC,IAAI,EAAE;YACnC,EAAE,EAAE,EAAE,KAAK,EAAE;SACd,EACD,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAClB,CAAC;IACJ,CAAC;CACF;AA5HD,4BA4HC","sourcesContent":["/**\n * ```ts\n * import type { Analyzer } from \"arangojs/analyzer\";\n * ```\n *\n * The \"analyzer\" module provides analyzer related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nimport { ArangoResponseMetadata } from \"./connection\";\nimport { Database } from \"./database\";\nimport { isArangoError } from \"./error\";\nimport { ANALYZER_NOT_FOUND } from \"./lib/codes\";\n\n/**\n * Indicates whether the given value represents an {@link Analyzer}.\n *\n * @param analyzer - A value that might be an Analyzer.\n */\nexport function isArangoAnalyzer(analyzer: any): analyzer is Analyzer {\n  return Boolean(analyzer && analyzer.isArangoAnalyzer);\n}\n\n/**\n * Name of a feature enabled for an Analyzer.\n */\nexport type AnalyzerFeature = \"frequency\" | \"norm\" | \"position\";\n\n/**\n * An object describing an Analyzer.\n */\nexport type AnalyzerDescription = AnalyzerInfo & {\n  name: string;\n  features: AnalyzerFeature[];\n};\n\n/**\n * Options for creating an Analyzer.\n */\nexport type CreateAnalyzerOptions = AnalyzerInfo & {\n  /**\n   * Features to enable for this Analyzer.\n   */\n  features?: AnalyzerFeature[];\n};\n\n/**\n * Analyzer type and its type-specific properties.\n */\nexport type AnalyzerInfo =\n  | IdentityAnalyzerInfo\n  | DelimiterAnalyzerInfo\n  | StemAnalyzerInfo\n  | NormAnalyzerInfo\n  | NgramAnalyzerInfo\n  | TextAnalyzerInfo;\n\n/**\n * Analyzer type and type-specific properties for an Identity Analyzer.\n */\nexport type IdentityAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"identity\";\n  /**\n   * Additional properties for the Analyzer.\n   *\n   * The `identity` Analyzer does not take additional properties.\n   */\n  properties?: null;\n};\n\n/**\n * Analyzer type and type-specific properties for a Delimiter Analyzer.\n */\nexport type DelimiterAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"delimiter\";\n  /**\n   * Additional properties for the Analyzer.\n   *\n   * The value will be used as delimiter to split text into tokens as specified\n   * in RFC 4180, without starting new records on newlines.\n   */\n  properties: string | { delimiter: string };\n};\n\n/**\n * Analyzer type and type-specific properties for a Stem Analyzer.\n */\nexport type StemAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"stem\";\n  /**\n   * Additional properties for the Analyzer.\n   *\n   * The value defines the text locale.\n   *\n   * Format: `language[_COUNTRY][.encoding][@variant]`\n   */\n  properties: { locale: string };\n};\n\n/**\n * Properties of a Norm Analyzer.\n */\nexport type NormAnalyzerProperties = {\n  /**\n   * Text locale.\n   *\n   * Format: `language[_COUNTRY][.encoding][@variant]`\n   */\n  locale: string;\n  /**\n   * Case conversion.\n   *\n   * Default: `\"lower\"`\n   */\n  case?: \"lower\" | \"none\" | \"upper\";\n  /**\n   * Preserve accents in returned words.\n   *\n   * Default: `false`\n   */\n  accent?: boolean;\n};\n\n/**\n * Analyzer type and type-specific properties for a Norm Analyzer.\n */\nexport type NormAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"norm\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: NormAnalyzerProperties;\n};\n\n/**\n * Properties of an Ngram Analyzer.\n */\nexport type NgramAnalyzerProperties = {\n  /**\n   * Maximum n-gram length.\n   */\n  max: number;\n  /**\n   * Minimum n-gram length.\n   */\n  min: number;\n  /**\n   * Output the original value as well.\n   */\n  preserveOriginal: boolean;\n};\n\n/**\n * Analyzer type and type-specific properties for an Ngram Analyzer.\n */\nexport type NgramAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"ngram\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: NgramAnalyzerProperties;\n};\n\n/**\n * Properties of a Text Analyzer.\n */\nexport type TextAnalyzerProperties = {\n  /**\n   * Text locale.\n   *\n   * Format: `language[_COUNTRY][.encoding][@variant]`\n   */\n  locale: string;\n  /**\n   * Case conversion.\n   *\n   * Default: `\"lower\"`\n   */\n  case?: \"lower\" | \"none\" | \"upper\";\n  /**\n   * Words to omit from result.\n   *\n   * Defaults to the words loaded from the file at `stopwordsPath`.\n   */\n  stopwords?: string[];\n  /**\n   * Path with a `language` sub-directory containing files with words to omit.\n   *\n   * Defaults to the path specified in the server-side environment variable\n   * `IRESEARCH_TEXT_STOPWORD_PATH` or the current working directory of the\n   * ArangoDB process.\n   */\n  stopwordsPath?: string;\n  /**\n   * Preserve accents in returned words.\n   *\n   * Default: `false`\n   */\n  accent?: boolean;\n  /**\n   * Apply stemming on returned words.\n   *\n   * Default: `true`\n   */\n  stemming?: boolean;\n};\n\n/**\n * Analyzer type and type-specific properties for a Text Analyzer.\n */\nexport type TextAnalyzerInfo = {\n  /**\n   * Type of the Analyzer.\n   */\n  type: \"text\";\n  /**\n   * Additional properties for the Analyzer.\n   */\n  properties: TextAnalyzerProperties;\n};\n\n/**\n * Represents an Analyzer in a {@link Database}.\n */\nexport class Analyzer {\n  protected _name: string;\n  protected _db: Database;\n\n  /**\n   * @internal\n   * @hidden\n   */\n  constructor(db: Database, name: string) {\n    this._db = db;\n    this._name = name;\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB Analyzer.\n   */\n  get isArangoAnalyzer(): true {\n    return true;\n  }\n\n  /**\n   * Name of this Analyzer.\n   *\n   * See also {@link Database.analyzer}.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Checks whether the Analyzer exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * const result = await analyzer.exists();\n   * // result indicates whether the Analyzer exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err) {\n      if (isArangoError(err) && err.errorNum === ANALYZER_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieves the Analyzer definition for the Analyzer.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * const definition = await analyzer.get();\n   * // definition contains the Analyzer definition\n   * ```\n   */\n  get(): Promise<ArangoResponseMetadata & AnalyzerDescription> {\n    return this._db.request(\n      { path: `/_api/analyzer/${this.name}` },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Creates a new Analyzer with the given `options` and the instance's name.\n   *\n   * See also {@link Database.createAnalyzer}.\n   *\n   * @param options - Options for creating the Analyzer.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"potatoes\");\n   * await analyzer.create({ type: \"identity\" });\n   * // the identity Analyzer \"potatoes\" now exists\n   * ```\n   */\n  create(options: CreateAnalyzerOptions): Promise<AnalyzerDescription> {\n    return this._db.request(\n      {\n        method: \"POST\",\n        path: \"/_api/analyzer\",\n        body: { name: this.name, ...options },\n      },\n      (res) => res.body\n    );\n  }\n\n  /**\n   * Deletes the Analyzer from the database.\n   *\n   * @param force - Whether the Analyzer should still be deleted even if it\n   * is currently in use.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * await analyzer.drop();\n   * // the Analyzer \"some-analyzer\" no longer exists\n   * ```\n   */\n  drop(\n    force: boolean = false\n  ): Promise<ArangoResponseMetadata & { name: string }> {\n    return this._db.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/analyzer/${this.name}`,\n        qs: { force },\n      },\n      (res) => res.body\n    );\n  }\n}\n"]}